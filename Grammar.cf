comment "//" ;
comment "/*" "*/" ;

AbsTree. AbsTree ::= [Toplevel] ;

Function.     Toplevel  ::= Type CIdent "(" [Param] ")" "{" [Stm] "}" ;
Import.       Toplevel  ::= TkImport String ";" ;
TopDecl.      Toplevel  ::= Decl ";" ;
TypeDef.      Toplevel  ::= TkTypeDef TypeIdent TkAss Type ";" ;
terminator Toplevel "" ;


-- Tokens ----------------------------------------------------------------------
position token TkImport {"import"} ;
position token TkReturn {"return"} ;
position token TkFor {"for"} ;
position token TkWhile {"while"} ;
position token TkDo {"do"} ;
position token TkIf {"if"} ;
position token TkElse {"else"} ;
position token TkStruct {"struct"} ;
position token TkBreak {"break"} ;
position token TkContinue {"contiune"} ;
position token TkDiscard {"discard"} ;
position token TkConst {"const"} ;
position token TkExternal {"external"} ;
position token TkTypeDef {"typedef"} ;


position token TkOR     {"||"} ;
position token TkXOR    {"^^"} ;
position token TkAnd    {"&&"} ;
position token TkEqual  {"=="} ;
position token TkNEqual {"!="} ;

position token TkArrow {"->"} ;
position token TkPlusPlus {"++"} ;
position token TkMinusMinus {"--"} ;
position token TkAssAdd {"+="} ;
position token TkAssSub {"-="} ;
position token TkAssMul {"*="} ;
position token TkBWShiftLeft  {"<<"} ;
position token TkBWShiftRight {">>"} ;
position token TkLEt    {"<="} ;
position token TkGEt    {">="} ;

position token TkAssDiv   {"/="} ;
position token TkAssMod   {"%="} ;
position token TkAssBWAnd {"&="} ;
position token TkAssBWXOR {"^="} ;
position token TkAssBWOR  {"|="} ;

position token TkQuest ('?') ;
position token TkColon (':') ;

position token TkAss   ('=') ;
position token TkPlus  ('+') ;
position token TkMinus ('-') ;
position token TkMul   ('*') ;
position token TkDiv   ('/') ;
position token TkMod   ('%') ;

position token TkGt    ('>') ;
position token TkLt    ('<') ;

position token TkNegSign    ('!') ;
position token TkComplement ('~') ;

position token TkBWOR   ('|') ;
position token TkBWXOR  ('^') ;
position token TkBWAnd  ('&') ;

--EAssAdd.       Exp1  ::= Exp1 "+=" Exp2 ;
--EAssSub.       Exp1  ::= Exp1 "-=" Exp2 ;
token CFloat (((digit+ '.' digit+)|(digit+ '.')|('.' digit+)) (('e'|'E')('-')? digit+)?
               ('f'|'F')?)|((digit+ ('e'|'E')('-')? digit+)('f'|'F')?);


-- Parameter --------------------------------------------------------
ParamDec.            Param  ::= [Qualifier] CIdent ;
ParamDefault.        Param  ::= [Qualifier] CIdent TkAss Exp19 ;
separator Param "," ;


-- Declarations -----------------------------------------------------
Dec.             Decl  ::= [Qualifier] DeclPost ;
Struct.          Decl  ::= TkStruct CIdent "{" [StructVarDecl] "}" ;
StructDecl.      Decl  ::= TkStruct CIdent "{" [StructVarDecl] "}" CIdent ;
separator  Decl "," ;

SVDecl. StructVarDecl  ::= Decl ";" ;
separator StructVarDecl "" ;

QExternal.    Qualifier ::= TkExternal ;
QConst.       Qualifier ::= TkConst ;
QType.        Qualifier ::= Type ;
separator nonempty Qualifier "" ;

Vars.   DeclPost  ::= [CIdent] ;
DecAss. DeclPost  ::= [CIdent] TkAss Exp2 ;


-- Ident ------------------------------------------------------------
position token CIdent ((lower | '_') (letter | digit | '_')*) ;
position token TypeIdent ( upper ( letter | digit | '_')*);
separator nonempty CIdent "," ;

-- Statements -------------------------------------------------------
SDecl.     Stm ::= Decl ";" ;
SExp.      Stm ::= Exp ";" ;
SBlock.    Stm ::= "{" [Stm] "}" ;
SWhile.    Stm ::= TkWhile "(" Exp ")" Stm ;
SDoWhile.  Stm ::= TkDo Stm TkWhile "(" Exp ")" ";" ;
SFor.      Stm ::= TkFor "(" [ForDecl] ";" [Exp] ";" [Exp] ")" Stm ;
SReturn.   Stm ::= TkReturn Exp ";" ;
SVoidReturn.   Stm ::= TkReturn ";" ;
-- Shift/reduce at TkElse in SIf and SIfElse.
SIf.       Stm ::= TkIf "(" Exp ")" Stm ;
SIfElse.   Stm ::= TkIf "(" Exp ")" Stm TkElse Stm ;
SBreak.    Stm ::= TkBreak ";" ;
SContinue. Stm ::= TkContinue ";" ;
SDiscard.  Stm ::= TkDiscard ";" ;
terminator Stm "" ;

-- Enable annotation of types on statements
internal SType. Stm ::= Type Stm ;


-- For-specific initiation declarations -----------------------------
FDecl.   ForDecl ::= Decl ;
FExp.    ForDecl ::= Exp ;

separator ForDecl "," ;


-- Expressions ------------------------------------------------------
EAss.          Exp1  ::= Exp1 TkAss  Exp2 ;
EAssAdd.       Exp1  ::= Exp1 TkAssAdd Exp2 ;
EAssSub.       Exp1  ::= Exp1 TkAssSub Exp2 ;
EAssMul.       Exp1  ::= Exp1 TkAssMul Exp2 ;
EAssDiv.       Exp1  ::= Exp1 TkAssDiv Exp2 ;
EAssMod.       Exp1  ::= Exp1 TkAssMod Exp2 ;
EAssBWAnd.     Exp1  ::= Exp1 TkAssBWAnd Exp2 ;
EAssBWXOR.     Exp1  ::= Exp1 TkAssBWXOR Exp2 ;
EAssBWOR.      Exp1  ::= Exp1 TkAssBWOR Exp2 ;

ECond.         Exp2  ::= Exp2 TkQuest Exp3 TkColon Exp3 ;

EOR.           Exp3  ::= Exp3 TkOR Exp4 ;

EXOR.          Exp4  ::= Exp4 TkXOR Exp5 ;

EAnd.          Exp5  ::= Exp5 TkAnd Exp6 ;

EBWOR.         Exp6  ::= Exp6 TkBWOR Exp7 ;

EBWXOR.        Exp7  ::= Exp7 TkBWXOR Exp8 ;

EBWAnd.        Exp8  ::= Exp8 TkBWAnd Exp9 ;

EEqual.        Exp9  ::= Exp9 TkEqual  Exp10 ;
ENEqual.       Exp9  ::= Exp9 TkNEqual Exp10 ;

ELt.           Exp10 ::= Exp10 TkLt Exp11 ;
EGt.           Exp10 ::= Exp10 TkGt  Exp11 ;
ELEt.          Exp10 ::= Exp10 TkLEt Exp11 ;
EGEt.          Exp10 ::= Exp10 TkGEt Exp11 ;

EBWShiftLeft.  Exp11 ::= Exp11 TkBWShiftLeft Exp12 ;
EBWShiftRight. Exp11 ::= Exp11 TkBWShiftRight Exp12 ;

EAdd.          Exp12 ::= Exp12 TkPlus Exp13 ;
ESub.          Exp12 ::= Exp12 TkMinus Exp13 ;

EMul.          Exp13 ::= Exp13 TkMul Exp14 ;
EDiv.          Exp13 ::= Exp13 TkDiv Exp14 ;
EMod.          Exp13 ::= Exp13 TkMod Exp14 ;

ENeg.          Exp14 ::= TkMinus      Exp15 ;
ENegSign.      Exp14 ::= TkNegSign    Exp15 ;
EComplement.   Exp14 ::= TkComplement Exp15 ;
EPos.          Exp14 ::= TkPlus  Exp15 ;
EPreInc.       Exp14 ::= TkPlusPlus Exp15 ;
EPreDec.       Exp14 ::= TkMinusMinus Exp15 ;

EPostInc.      Exp15 ::= Exp15 TkPlusPlus ;
EPostDec.      Exp15 ::= Exp15 TkMinusMinus ;
EMember.       Exp15 ::= Exp15 "." Exp16 ;

ECall.         Exp16 ::= CIdent "(" [Exp] ")" ;

-- Enables anonymous declaration on the form Image(int x, int y) { stms };
ETypeCall.     Exp17 ::= Type "(" [Exp] ")" ;
EAnonDecl.     Exp17 ::= Type "(" [AnonParam] ")" "{" [Stm] "}" ;
EAnonDeclVoid. Exp17 ::= Type "(" "void" ")" "{" [Stm] "}" ;

AnonParam.      AnonParam ::= Param ;
separator nonempty AnonParam "," ;

EVar.          Exp18 ::= CIdent ;
EIndex.        Exp18 ::= CIdent "[" Exp "]" ;

EFloat.        Exp19 ::= CFloat ;
EInt.          Exp19 ::= Integer ;
ETrue.         Exp19 ::= "true" ;
EFalse.        Exp19 ::= "false" ;

coercions Exp 19 ;
separator Exp "," ;


-- Types ------------------------------------------------------------
TVoid.       Type1 ::= "Void" ;
TFloat.      Type1 ::= "Float" ;
TBool.       Type1 ::= "Bool" ;
TInt.        Type1 ::= "Int" ;
TBVec2.      Type1 ::= "BVec2" ;
TBVec3.      Type1 ::= "BVec3" ;
TBVec4.      Type1 ::= "BVec4" ;
TIVec2.      Type1 ::= "IVec2" ;
TIVec3.      Type1 ::= "IVec3" ;
TIVec4.      Type1 ::= "IVec4" ;
TUVec2.      Type1 ::= "UVec2" ;
TUVec3.      Type1 ::= "UVec3" ;
TUVec4.      Type1 ::= "UVec4" ;
TVec2.       Type1 ::= "Vec2" ;
TVec3.       Type1 ::= "Vec3" ;
TVec4.       Type1 ::= "Vec4" ;
TMat2.       Type1 ::= "Mat2" ;
TMat3.       Type1 ::= "Mat3" ;
TMat4.       Type1 ::= "Mat4" ;
TStruct.     Type1 ::= TkStruct CIdent ;
TArray.      Type2 ::= Type1 "[" "]" ;
TFunc.       Type2 ::= Type TkArrow Type ;
TDefined.    Type3 ::= TypeIdent ;

coercions Type 3 ;

-- Allow for type of functions
internal TFun.    Type ::= Type [Type] ;
internal TArray.  Type ::= Type ;
internal TConst.  Type ::= Type ;
separator Type "" ;

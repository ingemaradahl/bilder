-- TODO: Think over arrays.
-- TODO: Precedence on Expressions

comment "//" ;
comment "/*" "*/" ;

Tree. Tree ::= [Toplevel] ;

Function.    Toplevel  ::= Type CIdent "(" [Param] ")" "{" [Stm] "}" ;
Struct.      Toplevel  ::= TStruct CIdent "{" [StructVarDecl] "}" ";" ;
StructDecl.  Toplevel  ::= TStruct CIdent "{" [StructVarDecl] "}" Id ";" ;
Import.      Toplevel  ::= TImport String ";" ;
terminator Toplevel "" ;


SVDecl. StructVarDecl  ::= Decl ";" ;
separator StructVarDecl "" ;

-- Tokens ----------------------------------------------------------------------
position token TImport {"import"} ;
position token TReturn {"return"} ;
position token TFor {"for"} ;
position token TWhile {"while"} ;
position token TIf {"if"} ;
position token TElse {"else"} ;
position token TStruct {"struct"} ;

-- Parameter --------------------------------------------------------
ConstParamDec.       Param  ::= "const" Type Id ;
ConstParamDefault.   Param  ::= "const" Type Id "=" Exp2 ;
ParamDec.            Param  ::= Type Id ;
-- TODO only allow explicit expressions (currently Exp19)
ParamDefault.        Param  ::= Type Id "=" Exp2 ;
separator Param "," ;


-- Declarations -----------------------------------------------------
Dec.             Decl  ::= Type DeclPost ;
ConstDec.        Decl  ::= "const" Type DeclPost ;
DecStruct.       Decl  ::= Id DeclPost ;
ConstDecStruct.  Decl  ::= "const" Id DeclPost ;
separator  Decl "," ;

OnlyVars.    DeclPost  ::= [Id] ;
DefaultVars. DeclPost  ::= [Id] "=" Exp2 ;


-- Ident ------------------------------------------------------------
position token CIdent ((letter | '_') (letter | digit | '_')*) ;

IdEmptyArray. Id  ::= CIdent "[" "]" ;
IdArray.      Id  ::= CIdent "[" Exp "]" ;
Ident.        Id  ::= CIdent ;
separator nonempty Id "," ;


-- Statements -------------------------------------------------------
SDecl.   Stm ::= Decl ";" ;
SExp.    Stm ::= Exp ";" ;
SBlock.  Stm ::= "{" [Stm] "}" ;
SWhile.  Stm ::= TWhile "(" Exp ")" Stm ;
SFor.    Stm ::= TFor "(" [ForDecl] ";" [Exp] ";" [Exp] ")" Stm ;
SReturn. Stm ::= TReturn Exp ";" ;
-- TODO: shift/reduce here... avoidable?
SIf.     Stm ::= TIf "(" Exp ")" Stm ;
SIfElse. Stm ::= TIf "(" Exp ")" Stm TElse Stm ;

terminator Stm "" ;
--coercions Stm 2 ;

-- Enable annotation of types on statements
internal SType. Stm ::= Type Stm ;

-- For-specific initiation declarations -----------------------------
-- TODO: What is allowed in first section of a for-loop?
FDecl.   ForDecl ::= Decl ;
FExp.    ForDecl ::= Exp ;

separator ForDecl "," ;


-- Expressions ------------------------------------------------------
EAss.          Exp1  ::= Exp1 "="  Exp2 ;
EAssAdd.       Exp1  ::= Exp1 "+=" Exp2 ;
EAssSub.       Exp1  ::= Exp1 "-=" Exp2 ;
EAssMul.       Exp1  ::= Exp1 "*=" Exp2 ;
EAssDiv.       Exp1  ::= Exp1 "/=" Exp2 ;
EAssMod.       Exp1  ::= Exp1 "%=" Exp2 ;
EAssBWAnd.     Exp1  ::= Exp1 "&=" Exp2 ;
EAssBWXOR.     Exp1  ::= Exp1 "^=" Exp2 ;
EAssBWOR.      Exp1  ::= Exp1 "|=" Exp2 ;

ECond.         Exp2  ::= Exp2 "?" Exp3 ":" Exp3 ;

EOR.           Exp3  ::= Exp3 "||" Exp4 ;

EXOR.          Exp4  ::= Exp4 "^^" Exp5 ;

EAnd.          Exp5  ::= Exp5 "&&" Exp6 ;

EBWOR.         Exp6  ::= Exp6 "|" Exp7 ;

EBWXOR.        Exp7  ::= Exp7 "^" Exp8 ;

EBWAnd.        Exp8  ::= Exp8 "&" Exp9 ;

EEqual.        Exp9  ::= Exp9 "==" Exp10 ;
ENEqual.       Exp9  ::= Exp9 "!=" Exp10 ;

ELt.           Exp10 ::= Exp10 "<"  Exp11 ;
EGt.           Exp10 ::= Exp10 ">"  Exp11 ;
ELEt.          Exp10 ::= Exp10 "<=" Exp11 ;
EGEt.          Exp10 ::= Exp10 ">=" Exp11 ;

EBWShiftLeft.  Exp11 ::= Exp11 "<<" Exp12 ;
EBWShiftRight. Exp11 ::= Exp11 ">>" Exp12 ;

EAdd.          Exp12 ::= Exp12 "+" Exp13 ;
ESub.          Exp12 ::= Exp12 "-" Exp13 ;

EMul.          Exp13 ::= Exp13 "*" Exp14 ;
EDiv.          Exp13 ::= Exp13 "/" Exp14 ;
EMod.          Exp13 ::= Exp13 "%" Exp14 ;

ENeg.          Exp14 ::= "-"  Exp15 ;
ENegSign.      Exp14 ::= "!"  Exp15 ;
EComplement.   Exp14 ::= "~"  Exp15 ;
EPos.          Exp14 ::= "+"  Exp15 ;
EPreInc.       Exp14 ::= "++" Exp15 ;
EPreDec.       Exp14 ::= "--" Exp15 ;

EPostInc.      Exp15 ::= Exp15 "++" ;
EPostDec.      Exp15 ::= Exp15 "--" ;
EMember.       Exp15 ::= Exp15 "." Exp16 ;

ECall.         Exp16 ::= CIdent "(" [Exp] ")" ;

ETypeCall.     Exp17 ::= Type "(" [Exp] ")" ;

-- EAnonFun needed for:
-- return Color(int x, int y) { ...; return color; }
-- reduce/reduce between ETypeCall and EAnonFun.
--EAnonFun.   Exp17 ::= Type "(" [Param] ")" "{" [Stm] "}" ;

EAnonLFun.    Exp18 ::= "lambda" "(" [Param] ")" "{" [Stm] "}" ;

EVar.          Exp19 ::= Id ;
EStr.          Exp19 ::= String ;
EInt.          Exp19 ::= Integer ;
Double.        Exp19 ::= Double ;
ETrue.         Exp19 ::= "true" ;
EFalse.        Exp19 ::= "false" ;
EType.         Exp19 ::= Type;

coercions Exp 19 ;
separator Exp "," ;


-- Types ------------------------------------------------------------
TInt.        Type ::= "int" ;
TUInt.       Type ::= "uint" ;
TFloat.      Type ::= "float" ;
TBool.       Type ::= "bool" ;
TBVec2.      Type ::= "BVec2" ;
TBVec3.      Type ::= "BVec3" ;
TBVec4.      Type ::= "BVec4" ;
TIVec2.      Type ::= "IVec2" ;
TIVec3.      Type ::= "IVec3" ;
TIVec4.      Type ::= "IVec4" ;
TUVec2.      Type ::= "UVec2" ;
TUVec3.      Type ::= "UVec3" ;
TUVec4.      Type ::= "UVec4" ;
TVec2.       Type ::= "Vec2" ;
TVec3.       Type ::= "Vec3" ;
TVec4.       Type ::= "Vec4" ;
TMat2.       Type ::= "Mat2" ;
TMat3.       Type ::= "Mat3" ;
TMat4.       Type ::= "Mat4" ;
TColor.      Type ::= "Color" ;
TImage.      Type ::= "Image" ;
TEmptyArray. Type ::= Type "[" "]";
TArray.      Type ::= Type "[" Exp "]";

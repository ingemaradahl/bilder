comment "//" ;
comment "/*" "*/" ;

AbsTree. AbsTree ::= [Toplevel] ;

-- Shift/reduce before ) in Function, EmptyFunction and VoidFunction.
Function.     Toplevel  ::= Type CIdent "(" [Param] ")" "{" [Stm] "}" ;
EmptyFunction. Toplevel ::= Type CIdent "(" ")" "{" [Stm] "}" ;
VoidFunction. Toplevel  ::= Type CIdent "(" "void" ")" "{" [Stm] "}" ;
Struct.       Toplevel  ::= TkStruct CIdent "{" [StructVarDecl] "}" ";" ;
StructDecl.   Toplevel  ::= TkStruct CIdent "{" [StructVarDecl] "}" Id ";" ;
Import.       Toplevel  ::= TkImport String ";" ;
terminator Toplevel "" ;

SVDecl. StructVarDecl  ::= Decl ";" ;
separator StructVarDecl "" ;

-- Tokens ----------------------------------------------------------------------
position token TkImport {"import"} ;
position token TkReturn {"return"} ;
position token TkFor {"for"} ;
position token TkWhile {"while"} ;
position token TkDo {"do"} ;
position token TkIf {"if"} ;
position token TkElse {"else"} ;
position token TkStruct {"struct"} ;
position token TkBreak {"break"} ;
position token TkContinue {"contiune"} ;
position token TkDiscard {"discard"} ;
position token TkConst {"const"} ;

token CFloat (((digit+ '.' digit+)|(digit+ '.')|('.' digit+)) (('e'|'E')('-')? digit+)?
               ('f'|'F')?)|((digit+ ('e'|'E')('-')? digit+)('f'|'F')?);


-- Parameter --------------------------------------------------------
ConstParamDec.       Param  ::= TkConst Type Id ;
ConstParamDefault.   Param  ::= TkConst Type Id "=" Exp19 ;
ParamDec.            Param  ::= Type Id ;
ParamDefault.        Param  ::= Type Id "=" Exp19 ;
separator Param "," ;


-- Declarations -----------------------------------------------------
Dec.             Decl  ::= Type DeclPost ;
ConstDec.        Decl  ::= TkConst Type DeclPost ;
DecStruct.       Decl  ::= Id DeclPost ;
ConstDecStruct.  Decl  ::= TkConst Id DeclPost ;
separator  Decl "," ;

OnlyVars.    DeclPost  ::= [Id] ;
DefaultVars. DeclPost  ::= [Id] "=" Exp2 ;


-- Ident ------------------------------------------------------------
position token CIdent ((letter | '_') (letter | digit | '_')*) ;

-- Shift/reduce at , in IdEmptyArray, IdArray and Ident (when used as [Id]).
IdEmptyArray. Id  ::= CIdent "[" "]" ;
IdArray.      Id  ::= CIdent "[" Exp "]" ;
Ident.        Id  ::= CIdent ;
separator nonempty Id "," ;


-- Statements -------------------------------------------------------
SDecl.     Stm ::= Decl ";" ;
SExp.      Stm ::= Exp ";" ;
SBlock.    Stm ::= "{" [Stm] "}" ;
SWhile.    Stm ::= TkWhile "(" Exp ")" Stm ;
SDoWhile.  Stm ::= TkDo Stm TkWhile "(" Exp ")" ";" ;
SFor.      Stm ::= TkFor "(" [ForDecl] ";" [Exp] ";" [Exp] ")" Stm ;
SReturn.   Stm ::= TkReturn Exp ";" ;
SVoidReturn.   Stm ::= TkReturn ";" ;
-- Shift/reduce at TkElse in SIf and SIfElse.
SIf.       Stm ::= TkIf "(" Exp ")" Stm ;
SIfElse.   Stm ::= TkIf "(" Exp ")" Stm TkElse Stm ;
SBreak.    Stm ::= TkBreak ";" ;
SContinue. Stm ::= TkContinue ";" ;
SDiscard.  Stm ::= TkDiscard ";" ;
terminator Stm "" ;

-- Enable annotation of types on statements
internal SType. Stm ::= Type Stm ;


-- For-specific initiation declarations -----------------------------
FDecl.   ForDecl ::= Decl ;
FExp.    ForDecl ::= Exp ;

separator ForDecl "," ;


-- Expressions ------------------------------------------------------
EAss.          Exp1  ::= Exp1 "="  Exp2 ;
EAssAdd.       Exp1  ::= Exp1 "+=" Exp2 ;
EAssSub.       Exp1  ::= Exp1 "-=" Exp2 ;
EAssMul.       Exp1  ::= Exp1 "*=" Exp2 ;
EAssDiv.       Exp1  ::= Exp1 "/=" Exp2 ;
EAssMod.       Exp1  ::= Exp1 "%=" Exp2 ;
EAssBWAnd.     Exp1  ::= Exp1 "&=" Exp2 ;
EAssBWXOR.     Exp1  ::= Exp1 "^=" Exp2 ;
EAssBWOR.      Exp1  ::= Exp1 "|=" Exp2 ;

ECond.         Exp2  ::= Exp2 "?" Exp3 ":" Exp3 ;

EOR.           Exp3  ::= Exp3 "||" Exp4 ;

EXOR.          Exp4  ::= Exp4 "^^" Exp5 ;

EAnd.          Exp5  ::= Exp5 "&&" Exp6 ;

EBWOR.         Exp6  ::= Exp6 "|" Exp7 ;

EBWXOR.        Exp7  ::= Exp7 "^" Exp8 ;

EBWAnd.        Exp8  ::= Exp8 "&" Exp9 ;

EEqual.        Exp9  ::= Exp9 "==" Exp10 ;
ENEqual.       Exp9  ::= Exp9 "!=" Exp10 ;

ELt.           Exp10 ::= Exp10 "<"  Exp11 ;
EGt.           Exp10 ::= Exp10 ">"  Exp11 ;
ELEt.          Exp10 ::= Exp10 "<=" Exp11 ;
EGEt.          Exp10 ::= Exp10 ">=" Exp11 ;

EBWShiftLeft.  Exp11 ::= Exp11 "<<" Exp12 ;
EBWShiftRight. Exp11 ::= Exp11 ">>" Exp12 ;

EAdd.          Exp12 ::= Exp12 "+" Exp13 ;
ESub.          Exp12 ::= Exp12 "-" Exp13 ;

EMul.          Exp13 ::= Exp13 "*" Exp14 ;
EDiv.          Exp13 ::= Exp13 "/" Exp14 ;
EMod.          Exp13 ::= Exp13 "%" Exp14 ;

ENeg.          Exp14 ::= "-"  Exp15 ;
ENegSign.      Exp14 ::= "!"  Exp15 ;
EComplement.   Exp14 ::= "~"  Exp15 ;
EPos.          Exp14 ::= "+"  Exp15 ;
EPreInc.       Exp14 ::= "++" Exp15 ;
EPreDec.       Exp14 ::= "--" Exp15 ;

EPostInc.      Exp15 ::= Exp15 "++" ;
EPostDec.      Exp15 ::= Exp15 "--" ;
EMember.       Exp15 ::= Exp15 "." Exp16 ;

ECall.         Exp16 ::= Id "(" [Exp] ")" ;

-- Enables anonymous declaration on the form Image(int x, int y) { stms };
ETypeCall.     Exp17 ::= Type "(" [Exp] ")" AnonDecl ;
AnonStms.      AnonDecl  ::= "{" [Stm] "}" ;
OnlyCall.      AnonDecl  ::= ;

EVar.          Exp18 ::= Id ;
--EType.         Exp18 ::= Type;

EInt.          Exp19 ::= Integer ;
EFloat.        Exp19 ::= CFloat ;
ETrue.         Exp19 ::= "true" ;
EFalse.        Exp19 ::= "false" ;

coercions Exp 19 ;
separator Exp "," ;


-- Types ------------------------------------------------------------
TInt.        Type ::= "int" ;
TUInt.       Type ::= "uint" ;
TFloat.      Type ::= "float" ;
TVoid.       Type ::= "void" ;
TBool.       Type ::= "bool" ;
TBVec2.      Type ::= "BVec2" ;
TBVec3.      Type ::= "BVec3" ;
TBVec4.      Type ::= "BVec4" ;
TIVec2.      Type ::= "IVec2" ;
TIVec3.      Type ::= "IVec3" ;
TIVec4.      Type ::= "IVec4" ;
TUVec2.      Type ::= "UVec2" ;
TUVec3.      Type ::= "UVec3" ;
TUVec4.      Type ::= "UVec4" ;
TVec2.       Type ::= "Vec2" ;
TVec3.       Type ::= "Vec3" ;
TVec4.       Type ::= "Vec4" ;
TMat2.       Type ::= "Mat2" ;
TMat3.       Type ::= "Mat3" ;
TMat4.       Type ::= "Mat4" ;
TColor.      Type ::= "Color" ;
TImage.      Type ::= "Image" ;

-- Allow for type of functions
internal TFun.    Type ::= Type [Type] ;
internal TArray.  Type ::= Type ;
internal TConst.  Type ::= Type ;
separator Type "" ;
